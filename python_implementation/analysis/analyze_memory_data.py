#!/usr/bin/env python3
"""
An√°lise Completa dos Dados da Mem√≥ria do Dwarf Fortress
Mostra todos os dados que podem ser extra√≠dos da mem√≥ria
"""

import json
from pathlib import Path
import configparser

def analisar_layout_memoria():
    """Analisa o layout de mem√≥ria para mostrar todos os dados dispon√≠veis"""
    
    print("üß† AN√ÅLISE COMPLETA DOS DADOS DA MEM√ìRIA DO DWARF FORTRESS")
    print("=" * 70)
    
    # Carregar layout de mem√≥ria
    layout_file = Path("share/memory_layouts/windows/v0.52.05-steam_win64.ini")
    if not layout_file.exists():
        print("‚ùå Arquivo de layout n√£o encontrado")
        return
    
    config = configparser.ConfigParser()
    config.read(layout_file)
    
    # 1. ENDERE√áOS GLOBAIS
    print("\nüåç ENDERE√áOS GLOBAIS - Dados do Mundo/Fortress:")
    print("-" * 50)
    
    global_addresses = {
        'current_year': 'Ano atual do jogo',
        'dwarf_civ_index': 'ID da civiliza√ß√£o dos dwarves',
        'dwarf_race_index': 'ID da ra√ßa dwarf',
        'fortress_entity': 'Entidade da fortaleza',
        'creature_vector': 'Lista de todas as criaturas',
        'active_creature_vector': 'Lista de criaturas ativas',
        'squad_vector': 'Esquadr√µes militares',
        'historical_figures_vector': 'Figuras hist√≥ricas',
        'world_data': 'Dados do mundo',
        'artifacts_vector': 'Artefatos',
        'reactions_vector': 'Rea√ß√µes de crafting',
        'materials_vector': 'Materiais dispon√≠veis',
        'plants_vector': 'Plantas do mundo',
        'races_vector': 'Todas as ra√ßas',
        'colors_vector': 'Cores dispon√≠veis',
        'language_vector': 'Dados de linguagem'
    }
    
    if 'addresses' in config:
        addresses = dict(config['addresses'])
        for key, desc in global_addresses.items():
            if key in addresses:
                print(f"  ‚úÖ {key:<25} ‚Üí {desc}")
            else:
                print(f"  ‚ùå {key:<25} ‚Üí {desc} (n√£o dispon√≠vel)")
    
    # 2. DADOS DOS DWARVES/UNIDADES
    print("\nüë§ DADOS DOS DWARVES - Informa√ß√µes individuais:")
    print("-" * 50)
    
    dwarf_data = {
        'name': 'Nome do dwarf',
        'custom_profession': 'Profiss√£o customizada',
        'profession': 'Profiss√£o padr√£o/ID',
        'race': 'ID da ra√ßa',
        'caste': 'Casta (sexo/tipo)',
        'sex': 'Sexo (masculino/feminino)',
        'id': 'ID √∫nico do dwarf',
        'civ': 'ID da civiliza√ß√£o',
        'birth_year': 'Ano de nascimento',
        'birth_time': 'Tempo espec√≠fico de nascimento',
        'age': 'Idade (calculada)',
        'mood': 'Humor/mood atual',
        'physical_attrs': 'Atributos f√≠sicos (for√ßa, agilidade, etc.)',
        'souls': 'Dados da "alma" (skills, personalidade)',
        'labors': 'Trabalhos habilitados/desabilitados',
        'squad_id': 'ID do esquadr√£o militar',
        'squad_position': 'Posi√ß√£o no esquadr√£o',
        'current_job': 'Trabalho atual sendo executado',
        'hist_id': 'ID como figura hist√≥rica',
        'curse': 'Maldi√ß√µes/efeitos m√°gicos',
        'active_syndrome_vector': 'S√≠ndromes ativas (doen√ßas, etc.)',
        'unit_health_info': 'Informa√ß√µes de sa√∫de',
        'wounds_vector': 'Ferimentos atuais',
        'inventory': 'Itens carregados/equipados',
        'body_size': 'Tamanho do corpo',
        'blood': 'N√≠vel de sangue',
        'temp_mood': 'Humor tempor√°rio',
        'counters1/2/3': 'Contadores diversos',
        'artifact_name': 'Nome se for um artefato',
        'pet_owner_id': 'ID do dono se for pet'
    }
    
    if 'dwarf_offsets' in config:
        dwarf_offsets = dict(config['dwarf_offsets'])
        for key, desc in dwarf_data.items():
            base_key = key.split('/')[0]  # Para casos como counters1/2/3
            if base_key in dwarf_offsets:
                offset = dwarf_offsets[base_key]
                print(f"  ‚úÖ {key:<25} ‚Üí {desc} (offset: {offset})")
            else:
                print(f"  ‚ùå {key:<25} ‚Üí {desc} (n√£o dispon√≠vel)")
    
    # 3. DADOS DA ALMA (SOUL)
    print("\nüß† DADOS DA ALMA - Skills e personalidade:")
    print("-" * 50)
    
    soul_data = {
        'name': 'Nome da alma',
        'orientation': 'Orienta√ß√£o sexual/rom√¢ntica',
        'mental_attrs': 'Atributos mentais (intelig√™ncia, foco, etc.)',
        'skills': 'Habilidades e n√≠veis',
        'personality': 'Tra√ßos de personalidade',
        'beliefs': 'Cren√ßas religiosas/filos√≥ficas',
        'emotions': 'Estado emocional',
        'memories': 'Mem√≥rias importantes',
        'relationships': 'Relacionamentos com outros'
    }
    
    if 'soul_details' in config:
        soul_offsets = dict(config['soul_details'])
        for key, desc in soul_data.items():
            if key in soul_offsets:
                offset = soul_offsets[key]
                print(f"  ‚úÖ {key:<25} ‚Üí {desc} (offset: {offset})")
            else:
                print(f"  ‚ùå {key:<25} ‚Üí {desc} (n√£o dispon√≠vel)")
    
    # 4. DADOS DE SA√öDE
    print("\nüè• DADOS DE SA√öDE - Ferimentos e status f√≠sico:")
    print("-" * 50)
    
    if 'unit_wound_offsets' in config:
        wound_offsets = dict(config['unit_wound_offsets'])
        health_data = {
            'parts': 'Partes do corpo afetadas',
            'layer': 'Camada do ferimento (pele, m√∫sculo, etc.)',
            'bleeding': 'N√≠vel de sangramento',
            'pain': 'N√≠vel de dor',
            'effects_vector': 'Efeitos do ferimento',
            'flags1/flags2': 'Status diversos do ferimento'
        }
        
        for key, desc in health_data.items():
            base_key = key.split('/')[0]
            if base_key in wound_offsets:
                offset = wound_offsets[base_key]
                print(f"  ‚úÖ {key:<25} ‚Üí {desc} (offset: {offset})")
    
    # 5. DADOS DE EQUIPAMENTOS
    print("\n‚öîÔ∏è  DADOS DE EQUIPAMENTOS - Itens e armas:")
    print("-" * 50)
    
    equipment_vectors = [
        'weapons_vector', 'shields_vector', 'armor_vector', 
        'helms_vector', 'gloves_vector', 'shoes_vector',
        'pants_vector', 'backpacks_vector', 'ammo_vector'
    ]
    
    if 'addresses' in config:
        addresses = dict(config['addresses'])
        for vec in equipment_vectors:
            if vec in addresses:
                print(f"  ‚úÖ {vec:<25} ‚Üí Lista de {vec.replace('_vector', '').replace('_', ' ')}")
    
    # 6. DADOS ATUALMENTE IMPLEMENTADOS
    print("\nüìä DADOS ATUALMENTE LIDOS PELA NOSSA IMPLEMENTA√á√ÉO:")
    print("-" * 50)
    
    implemented_data = [
        'name', 'custom_profession', 'profession', 'race', 'caste', 
        'sex', 'id', 'age', 'mood', 'address'
    ]
    
    for data in implemented_data:
        print(f"  ‚úÖ {data}")
    
    # 7. POTENCIAL DE EXPANS√ÉO
    print("\nüöÄ DADOS QUE PODEM SER ADICIONADOS:")
    print("-" * 50)
    
    potential_data = [
        '‚Ä¢ Skills e n√≠veis de habilidade',
        '‚Ä¢ Atributos f√≠sicos e mentais',
        '‚Ä¢ Status de sa√∫de e ferimentos',
        '‚Ä¢ Equipamentos e invent√°rio',
        '‚Ä¢ Relacionamentos sociais',
        '‚Ä¢ Hist√≥rico de trabalhos',
        '‚Ä¢ Prefer√™ncias e personalidade',
        '‚Ä¢ Status militar e esquadr√£o',
        '‚Ä¢ Humor e necessidades',
        '‚Ä¢ Maldi√ß√µes e s√≠ndromes',
        '‚Ä¢ Mem√≥rias e experi√™ncias'
    ]
    
    for item in potential_data:
        print(f"  {item}")

def analisar_dados_exportados():
    """Analisa os dados que foram efetivamente exportados"""
    
    print("\n\nüìã AN√ÅLISE DOS DADOS EXPORTADOS:")
    print("=" * 50)
    
    try:
        with open('dwarves_data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìä Metadados:")
        metadata = data['metadata']
        for key, value in metadata.items():
            if key == 'layout_info':
                print(f"  ‚Ä¢ {key}: {value}")
            else:
                print(f"  ‚Ä¢ {key}: {value}")
        
        print(f"\nüë• Dwarves analisados: {len(data['dwarves'])}")
        
        if data['dwarves']:
            # Analisar primeiro dwarf como exemplo
            first_dwarf = data['dwarves'][0]
            print(f"\nüîç Exemplo - Primeiro dwarf:")
            for key, value in first_dwarf.items():
                print(f"  ‚Ä¢ {key}: {value}")
            
            # Estat√≠sticas
            print(f"\nüìà Estat√≠sticas:")
            
            ages = [d['age'] for d in data['dwarves'] if d['age'] > 0]
            if ages:
                print(f"  ‚Ä¢ Idades: {min(ages)} - {max(ages)} anos (m√©dia: {sum(ages)/len(ages):.1f})")
            
            named_dwarves = [d for d in data['dwarves'] if d['name']]
            print(f"  ‚Ä¢ Dwarves com nome: {len(named_dwarves)}")
            
            custom_prof = [d for d in data['dwarves'] if d['custom_profession']]
            print(f"  ‚Ä¢ Profiss√µes customizadas: {len(custom_prof)}")
            
            unique_races = set(d['race'] for d in data['dwarves'])
            print(f"  ‚Ä¢ Ra√ßas diferentes: {len(unique_races)}")
            
    except FileNotFoundError:
        print("‚ùå Arquivo dwarves_data.json n√£o encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao analisar dados: {e}")

if __name__ == "__main__":
    analisar_layout_memoria()
    analisar_dados_exportados()