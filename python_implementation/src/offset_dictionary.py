#!/usr/bin/env python3
"""
OFFSET DICTIONARY ANALYZER
===========================

Analisa todos os memory layouts do Dwarf Therapist para criar um dicion√°rio 
completo dos offsets e seus significados baseado nos nomes das chaves.

Este script gera uma documenta√ß√£o completa de todos os offsets dispon√≠veis
organizados por categoria (dwarf, squad, item, etc.).
"""

import os
import sys
import json
import configparser
from collections import defaultdict
from datetime import datetime

class OffsetDictionaryAnalyzer:
    def __init__(self, base_path):
        self.base_path = base_path
        self.memory_layouts_path = os.path.join(base_path, "share", "memory_layouts")
        self.offset_dictionary = defaultdict(lambda: defaultdict(dict))
        self.offset_meanings = {}
        
    def analyze_all_layouts(self):
        """Analisa todos os arquivos de memory layout"""
        print("üîç Analisando memory layouts...")
        
        layouts_found = 0
        for root, dirs, files in os.walk(self.memory_layouts_path):
            for file in files:
                if file.endswith('.ini'):
                    layouts_found += 1
                    file_path = os.path.join(root, file)
                    self.analyze_layout_file(file_path)
        
        print(f"üìä {layouts_found} arquivos de layout analisados")
        
    def analyze_layout_file(self, file_path):
        """Analisa um arquivo de memory layout espec√≠fico"""
        try:
            config = configparser.ConfigParser()
            config.read(file_path, encoding='utf-8')
            
            # Extrai informa√ß√µes do arquivo
            platform = "unknown"
            version = "unknown"
            
            if "windows" in file_path:
                platform = "windows"
            elif "linux" in file_path:
                platform = "linux"
            elif "osx" in file_path:
                platform = "osx"
                
            filename = os.path.basename(file_path)
            version = filename.replace('.ini', '')
            
            # Analisa cada se√ß√£o de offsets
            for section_name in config.sections():
                if section_name in ['info', 'valid_flags_1', 'valid_flags_2', 'valid_flags_3', 'invalid_flags_1', 'invalid_flags_2', 'invalid_flags_3']:
                    continue
                    
                section_items = dict(config.items(section_name))
                
                for key, value in section_items.items():
                    # Converte valor hexadecimal se poss√≠vel
                    try:
                        if value.startswith('0x'):
                            hex_value = value
                            int_value = int(value, 16)
                        else:
                            int_value = int(value)
                            hex_value = f"0x{int_value:04x}"
                    except ValueError:
                        hex_value = value
                        int_value = value
                    
                    # Armazena no dicion√°rio
                    if key not in self.offset_dictionary[section_name]:
                        self.offset_dictionary[section_name][key] = {
                            'hex_value': hex_value,
                            'int_value': int_value,
                            'meaning': self.infer_meaning(section_name, key),
                            'platforms': [platform],
                            'versions': [version]
                        }
                    else:
                        # Adiciona plataforma e vers√£o se n√£o existir
                        if platform not in self.offset_dictionary[section_name][key]['platforms']:
                            self.offset_dictionary[section_name][key]['platforms'].append(platform)
                        if version not in self.offset_dictionary[section_name][key]['versions']:
                            self.offset_dictionary[section_name][key]['versions'].append(version)
                            
        except Exception as e:
            print(f"‚ùå Erro ao analisar {file_path}: {e}")
    
    def infer_meaning(self, section, key):
        """Infere o significado do offset baseado no nome da chave"""
        
        # Mapeamento conhecido de offsets com significados
        known_meanings = {
            # Dwarf/Unit offsets
            'id': 'ID √∫nico da unidade',
            'race': 'ID da ra√ßa da criatura',
            'caste': 'ID da casta (sub-ra√ßa)',
            'sex': 'G√™nero (0=f√™mea, 1=macho)',
            'birth_year': 'Ano de nascimento',
            'birth_time': 'Tick de nascimento no ano',
            'name': 'Estrutura do nome da criatura',
            'first_name': 'Primeiro nome',
            'nickname': 'Apelido',
            'last_name': 'Sobrenome',
            'profession_id': 'ID da profiss√£o',
            'current_job': 'Ponteiro para o trabalho atual',
            'mood': 'Estado de humor atual',
            'happiness': 'N√≠vel de felicidade',
            'stress': 'N√≠vel de stress',
            'thoughts': 'Vetor de pensamentos',
            'labors': 'Array de trabalhos habilitados',
            'skills': 'Vetor de habilidades',
            'attributes': 'Vetor de atributos f√≠sicos/mentais',
            'physical_attrs': 'Atributos f√≠sicos (for√ßa, agilidade, etc.)',
            'mental_attrs': 'Atributos mentais (intelig√™ncia, foco, etc.)',
            'body_size': 'Tamanho do corpo',
            'size_info': 'Informa√ß√µes de tamanho',
            'curse': 'Informa√ß√µes sobre maldi√ß√µes',
            'squad_id': 'ID do esquadr√£o militar',
            'squad_position': 'Posi√ß√£o no esquadr√£o',
            'inventory': 'Vetor de itens no invent√°rio',
            'wounds': 'Vetor de ferimentos',
            'health': 'Informa√ß√µes de sa√∫de',
            'souls': 'Vetor de almas',
            'states': 'Estados especiais (migrante, adaptado caverna)',
            'flags1': 'Flags de estado prim√°rias',
            'flags2': 'Flags de estado secund√°rias',
            'flags3': 'Flags de estado terci√°rias',
            'civ': 'ID da civiliza√ß√£o',
            'hist_id': 'ID da figura hist√≥rica',
            'animal_type': 'Tipo de animal (se for animal)',
            'pet_owner_id': 'ID do dono (se for pet)',
            'meeting': 'Informa√ß√µes de reuni√£o/encontro',
            'counters1': 'Contadores diversos grupo 1',
            'counters2': 'Contadores diversos grupo 2',
            'counters3': 'Contadores diversos grupo 3',
            'turn_count': 'Contador de turnos',
            'blood': 'N√≠vel de sangue',
            'temp_mood': 'Humor tempor√°rio',
            
            # World/Global offsets
            'world_data': 'Ponteiro para dados do mundo',
            'current_year': 'Ano atual do jogo',
            'cur_year_tick': 'Tick atual no ano',
            'creature_vector': 'Vetor de todas as criaturas',
            'active_creature_vector': 'Vetor de criaturas ativas',
            'dwarf_race_index': '√çndice da ra√ßa dos an√µes',
            'fortress_entity': 'Entidade da fortaleza',
            'squad_vector': 'Vetor de esquadr√µes',
            'artifacts_vector': 'Vetor de artefatos',
            'activities_vector': 'Vetor de atividades',
            'historical_entities_vector': 'Vetor de entidades hist√≥ricas',
            'historical_figures_vector': 'Vetor de figuras hist√≥ricas',
            'world_site_type': 'Tipo de site mundial',
            'active_sites_vector': 'Vetor de sites ativos',
            
            # Item offsets
            'item_type': 'Tipo do item',
            'item_subtype': 'Subtipo do item',
            'material': 'Material do item',
            'quality': 'Qualidade do item',
            'wear': 'N√≠vel de desgaste',
            'stack_size': 'Tamanho da pilha',
            
            # Squad offsets
            'id': 'ID do esquadr√£o',
            'name': 'Nome do esquadr√£o',
            'members': 'Vetor de membros',
            'positions': 'Posi√ß√µes no esquadr√£o',
            'orders': 'Ordens atuais',
            'uniform': 'Uniforme do esquadr√£o',
            'alert': 'Estado de alerta',
            
            # Syndrome offsets
            'cie_effects': 'Efeitos da s√≠ndrome',
            'cie_end': 'Fim da s√≠ndrome',
            'syn_classes': 'Classes da s√≠ndrome',
            
            # Emotion offsets
            'type': 'Tipo da emo√ß√£o',
            'strength': 'Intensidade da emo√ß√£o',
            'year': 'Ano da emo√ß√£o',
            'target': 'Alvo da emo√ß√£o',
            
            # Activity offsets
            'type': 'Tipo da atividade',
            'participants': 'Participantes da atividade',
            
            # Wound offsets
            'parts': 'Partes do corpo afetadas',
            'layer': 'Camada afetada',
            'bleeding': 'Estado de sangramento',
            'infection': 'Estado de infec√ß√£o',
            'pain': 'N√≠vel de dor',
            
            # Need offsets
            'id': 'ID da necessidade',
            'level': 'N√≠vel da necessidade',
            'focus': 'Foco da necessidade',
        }
        
        # Busca significado conhecido
        if key in known_meanings:
            return known_meanings[key]
        
        # Infer√™ncia baseada em padr√µes
        if 'vector' in key:
            return f"Vetor de {key.replace('_vector', '').replace('_', ' ')}"
        elif 'offset' in key:
            return f"Offset para {key.replace('_offset', '').replace('_', ' ')}"
        elif 'addr' in key or 'address' in key:
            return f"Endere√ßo de {key.replace('_addr', '').replace('_address', '').replace('_', ' ')}"
        elif 'count' in key:
            return f"Contador de {key.replace('_count', '').replace('_', ' ')}"
        elif 'size' in key:
            return f"Tamanho de {key.replace('_size', '').replace('_', ' ')}"
        elif 'flag' in key:
            return f"Flag de {key.replace('_flag', '').replace('_', ' ')}"
        elif 'id' in key:
            return f"ID de {key.replace('_id', '').replace('_', ' ')}"
        elif 'year' in key:
            return f"Ano de {key.replace('_year', '').replace('_', ' ')}"
        elif 'time' in key:
            return f"Tempo de {key.replace('_time', '').replace('_', ' ')}"
        elif key.endswith('_x') or key.endswith('_y') or key.endswith('_z'):
            return f"Coordenada {key[-1].upper()} de {key[:-2].replace('_', ' ')}"
        else:
            return f"Campo {key.replace('_', ' ')}"
    
    def generate_category_descriptions(self):
        """Gera descri√ß√µes das categorias de offset"""
        return {
            'addresses': 'Endere√ßos globais do jogo (ponteiros para estruturas principais)',
            'dwarf_offsets': 'Offsets para dados de unidades/criaturas (an√µes, animais, invasores)',
            'squad_offsets': 'Offsets para dados de esquadr√µes militares',
            'word_offsets': 'Offsets para estruturas de palavras e linguagem',
            'race_offsets': 'Offsets para dados de ra√ßas (an√£o, elfo, humano, etc.)',
            'caste_offsets': 'Offsets para dados de castas (subtipos de ra√ßa)',
            'hist_figure_offsets': 'Offsets para figuras hist√≥ricas',
            'hist_event_offsets': 'Offsets para eventos hist√≥ricos',
            'hist_entity_offsets': 'Offsets para entidades hist√≥ricas (civiliza√ß√µes)',
            'item_offsets': 'Offsets para itens gen√©ricos',
            'weapon_subtype_offsets': 'Offsets para subtipos de armas',
            'armor_subtype_offsets': 'Offsets para subtipos de armaduras',
            'material_offsets': 'Offsets para dados de materiais',
            'plant_offsets': 'Offsets para dados de plantas',
            'syndrome_offsets': 'Offsets para s√≠ndromes (doen√ßas, maldi√ß√µes)',
            'emotion_offsets': 'Offsets para estados emocionais',
            'activity_offsets': 'Offsets para atividades das unidades',
            'health_offsets': 'Offsets para informa√ß√µes de sa√∫de',
            'unit_wound_offsets': 'Offsets para ferimentos de unidades',
            'general_ref_offsets': 'Offsets para refer√™ncias gerais',
            'art_offsets': 'Offsets para objetos de arte',
            'job_details': 'Offsets para trabalhos/tarefas',
            'soul_details': 'Offsets para dados da alma',
            'need_offsets': 'Offsets para necessidades das unidades',
            'viewscreen_offsets': 'Offsets para telas do jogo',
            'offsets': 'Offsets diversos de linguagem'
        }
    
    def export_dictionary(self):
        """Exporta o dicion√°rio completo para JSON"""
        export_data = {
            'metadata': {
                'generated_at': datetime.now().isoformat(),
                'description': 'Dicion√°rio completo de offsets do Dwarf Therapist',
                'total_sections': len(self.offset_dictionary),
                'total_offsets': sum(len(section) for section in self.offset_dictionary.values())
            },
            'category_descriptions': self.generate_category_descriptions(),
            'sections': dict(self.offset_dictionary)
        }
        
        # Calcula estat√≠sticas por se√ß√£o
        section_stats = {}
        for section_name, offsets in self.offset_dictionary.items():
            section_stats[section_name] = {
                'total_offsets': len(offsets),
                'platforms': set(),
                'versions': set()
            }
            
            for offset_data in offsets.values():
                section_stats[section_name]['platforms'].update(offset_data['platforms'])
                section_stats[section_name]['versions'].update(offset_data['versions'])
            
            # Converte sets para listas para JSON
            section_stats[section_name]['platforms'] = list(section_stats[section_name]['platforms'])
            section_stats[section_name]['versions'] = list(section_stats[section_name]['versions'])
        
        export_data['section_statistics'] = section_stats
        
        # Exporta para arquivo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_file = os.path.join(self.base_path, "python_implementation", "exports", f"offset_dictionary_{timestamp}.json")
        
        os.makedirs(os.path.dirname(export_file), exist_ok=True)
        
        with open(export_file, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÅ Dicion√°rio exportado para: {export_file}")
        return export_file
    
    def generate_markdown_report(self, json_file):
        """Gera relat√≥rio em markdown"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        md_file = os.path.join(self.base_path, f"DICIONARIO_OFFSETS_{timestamp}.md")
        
        category_descriptions = self.generate_category_descriptions()
        
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write("# Dicion√°rio de Offsets - Dwarf Therapist\n\n")
            f.write(f"**Gerado em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"**Total de se√ß√µes:** {len(self.offset_dictionary)}\n")
            f.write(f"**Total de offsets:** {sum(len(section) for section in self.offset_dictionary.values())}\n\n")
            
            f.write("## üìã √çndice\n\n")
            for section_name in sorted(self.offset_dictionary.keys()):
                count = len(self.offset_dictionary[section_name])
                f.write(f"- [{section_name}](#{section_name.replace('_', '-')}) ({count} offsets)\n")
            f.write("\n")
            
            f.write("## üìñ Descri√ß√£o das Categorias\n\n")
            for section_name, description in category_descriptions.items():
                if section_name in self.offset_dictionary:
                    f.write(f"**{section_name}:** {description}\n\n")
            
            f.write("## üîß Se√ß√µes de Offsets\n\n")
            
            for section_name in sorted(self.offset_dictionary.keys()):
                section = self.offset_dictionary[section_name]
                f.write(f"### {section_name}\n\n")
                
                if section_name in category_descriptions:
                    f.write(f"**Descri√ß√£o:** {category_descriptions[section_name]}\n\n")
                
                f.write(f"**Total de offsets:** {len(section)}\n\n")
                
                f.write("| Offset | Valor (Hex) | Valor (Dec) | Significado | Plataformas | Vers√µes |\n")
                f.write("|--------|-------------|-------------|-------------|-------------|---------|\n")
                
                for key in sorted(section.keys()):
                    data = section[key]
                    platforms = ", ".join(data['platforms'][:3])  # Limita para 3 plataformas
                    if len(data['platforms']) > 3:
                        platforms += "..."
                    
                    versions = ", ".join(data['versions'][:2])  # Limita para 2 vers√µes
                    if len(data['versions']) > 2:
                        versions += "..."
                    
                    f.write(f"| `{key}` | `{data['hex_value']}` | {data['int_value']} | {data['meaning']} | {platforms} | {versions} |\n")
                
                f.write("\n---\n\n")
        
        print(f"üìÑ Relat√≥rio markdown gerado: {md_file}")
        return md_file

def main():
    # Configura√ß√£o
    base_path = r"C:\Users\Eduardo\Documents\projetinhos\Dwarf-Therapist"
    
    print("=" * 60)
    print("OFFSET DICTIONARY ANALYZER")
    print("=" * 60)
    print()
    print("Criando dicion√°rio completo de offsets do Dwarf Therapist...")
    print()
    
    # Inicializa analisador
    analyzer = OffsetDictionaryAnalyzer(base_path)
    
    # Analisa todos os layouts
    analyzer.analyze_all_layouts()
    
    # Exporta dicion√°rio
    json_file = analyzer.export_dictionary()
    
    # Gera relat√≥rio markdown
    md_file = analyzer.generate_markdown_report(json_file)
    
    print()
    print("=" * 60)
    print("AN√ÅLISE CONCLU√çDA")
    print("=" * 60)
    print()
    print(f"üìä RESUMO:")
    print(f"   Total de se√ß√µes: {len(analyzer.offset_dictionary)}")
    print(f"   Total de offsets: {sum(len(section) for section in analyzer.offset_dictionary.values())}")
    print()
    print(f"üìÅ ARQUIVOS GERADOS:")
    print(f"   JSON: {json_file}")
    print(f"   Markdown: {md_file}")
    print()

if __name__ == "__main__":
    main()